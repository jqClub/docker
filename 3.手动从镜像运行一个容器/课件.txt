1.新建一个docker： docker run -d -t -p 8000:5000 --name demo ubuntu:18.04
2.端口被占用：1）改名字: docker run -d -t -p 8000:5000 --name test2 ubuntu:18.04
	2）删容器
	docker rm -f test
	docker run -d -t -p 8000:5000 --name test1 ubuntu:18.04

3.在容器中安装必备软件
docker exec demo apt update
docker exec demo apt -y install python3 python3-pip
docker exec demo pip3 install

4.在容器中运行web程序
#cp 参数是把当前文件夹下的a.py拷贝到demo容器的/code/a.py
#由于 /code必须是容器中存在的目录，Docker不会自动创建
docker exec demo mkdir /code
docker cp a.py "demo:/code/a.py"

运行: docker exec demo python3 /code/a.py

5.用脚本的方式配置容器
更好的方法是在宿主机写脚本，然后cp到docker容器中直接运行

在用脚本的方式运行之前，先清理刚运行的程序
Ctrl-c用于停止进程
docker stop demo 停止容器

写一个install.sh脚本用于安装软件，内容如下
#install.sh
apt update
apt -y install python3 python3-pip3
pip3 install flask

写一个run.sh脚本运行程序，内容如下:
#run.sh
cd /code
python3 a.py

6.运行脚本配置，并新开一个容器
#由于之前已经自动下载过ubuntu:18.04 所以这次不会重新下载镜像，速度很快
docker run -t -d -p 7000:5000 --name demo1 ubuntu:18.04

docker exec demo1 mkdir /code
docker cp install.sh "demo1:/code/install.sh"
docker cp run.sh "demo1:/code/run.sh"
docker cp a.py "demo1:/code/a.py"
docker exec demo1 bash /code/install.sh
docker exec demo1 bash /code/run.sh

7.容器的常用操作
#启动一个停止运行的容器
docker start demo

#查看正在运行的容器
docker ps

#停止容器，demo是容器的名字
docker stop demo

#再查看正在运行的容器，已经看不到 demo 了
docker ps

#可以用 -a 参数查看所有的容器，包括未运行的
docker ps -a

#删除被停止的容器和运行中的容器
docker rm demo
docker rm -f demo1
